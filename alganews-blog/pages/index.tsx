import { GetServerSideProps, GetServerSidePropsContext, PreviewData } from 'next';
import Router from 'next/router';
import Head from 'next/head';
import { ParsedUrlQuery } from 'querystring';
import { Post, PostService } from 'rospiel-react_alganews-sdk'; 
import isNull, { isFalse, nonNull } from "rospiel-react_alganews-sdk/dist/utils/objectUtil";
import PageGrid from '../components/PageGrid';

import PostFeature from '../components/Post.feature';
import PostCard from '../components/PostCard';
import PostsGrid from '../components/PostsGrid';
import ReactPaginate from "react-paginate";

interface HomeProps {
  posts?: Post.Paginated;
}

export default function Home(props: HomeProps) {
  const { posts } = props;

  if (isValidContent(posts!)) {
    return null;
  }

  return (
    <PageGrid>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      
      <PostFeature postSummary={posts!.content![0]} />

      <PostsGrid>
        {
          posts!.content!.slice(1).map((post) => {
            return <PostCard key={post.id} post={post} />;
          })
        }
      </PostsGrid>
      <ReactPaginate containerClassName="pagination" pageCount={props.posts!.totalPages || 0} marginPagesDisplayed={0} pageRangeDisplayed={3} previousLabel={"<"} nextLabel={">"} hrefBuilder={page => `/?page=${page}`} onPageChange={page => Router.push(`/?page=${page.selected + 1}`)} />
    </PageGrid>
  )
}

function hidePageZeroFromUrl(page: string | undefined | string[]): number {
  return Number(page) - 1;
}

function redirect(context: GetServerSidePropsContext<ParsedUrlQuery, PreviewData>): void {
  context.res.statusCode = 302;
  context.res.setHeader('Location', '/?page=1');
}

function isValidPageNumberAndRedirect(page: any, context: GetServerSidePropsContext<ParsedUrlQuery, PreviewData>): boolean {
  const value = Number(page);
  if (isNaN(value) || value < 1) {
    redirect(context);
    return false;
  }

  return true;
}

function isValidContent(posts: Post.Paginated): boolean {
  return isNull(posts) || isNull(posts!.content) || posts.content!.length === 0;
}

export const getServerSideProps: GetServerSideProps<HomeProps> = async (context) => {
  const { page } = context.query;
  
  if (isFalse(isValidPageNumberAndRedirect(page, context))) {
    return { props: {} };
  }

  const query = {} as Post.Query;
  query.page = hidePageZeroFromUrl(page);
  const posts = await PostService.getAllPosts(query);

  if (isValidContent(posts)) {
    redirect(context);
    return { props: {} };
  }

  return { props: { posts }};
}

